#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


# SNMPv2-SMI::mib-2.33.1.1.1.0 = STRING: "GE"
# SNMPv2-SMI::mib-2.33.1.1.2.0 = STRING: "SitePro"
# SNMPv2-SMI::mib-2.33.1.1.3.0 = STRING: "2.12"
# SNMPv2-SMI::mib-2.33.1.1.4.0 = STRING: "GEDE CP5 SNMP/Web Interface Ver.1.0 (2008/05/09)"
# SNMPv2-SMI::mib-2.33.1.1.5.0 = STRING: "GEDE_SNMP_UPS_Interface"
# SNMPv2-SMI::mib-2.33.1.1.6.0 = STRING: "UPS attached device"
# SNMPv2-SMI::mib-2.33.1.2.1.0 = INTEGER: 2
# SNMPv2-SMI::mib-2.33.1.2.2.0 = INTEGER: 0
# ==> Remaining capacity in estimated minutes
# SNMPv2-SMI::mib-2.33.1.2.3.0 = INTEGER: 150
# SNMPv2-SMI::mib-2.33.1.2.4.0 = INTEGER: 100 <-- Battery percentages
# SNMPv2-SMI::mib-2.33.1.2.5.0 = INTEGER: 4080
# SNMPv2-SMI::mib-2.33.1.2.6.0 = INTEGER: 0
# SNMPv2-SMI::mib-2.33.1.2.7.0 = INTEGER: 23
# SNMPv2-SMI::mib-2.33.1.3.1.0 = Counter32: 13
# SNMPv2-SMI::mib-2.33.1.3.2.0 = INTEGER: 3

#ups_capacity_defaul_levels = (0, 0)
#ups_capacity_default_levels = { 'capacity': (95, 90), 'battime': (0, 0) }
factory_settings["ups_capacity"] = { 
    'capacity': (95, 90), 
    'battime': (0, 0), 
}

def inventory_ups_capacity(info):
    if len(info) > 0:
        return [(None, 'ups_capacity')]

def check_ups_capacity(item, params, info):
    def check_lower_levels(value, levels):
        if not levels:
            return 0
        else:
            warn, crit = levels
            if value < crit:
                return 2
            elif value < warn:
                return 1
            else:
                return 0

    # To support inventories with the old version
    if type(params) is tuple:  # old format with 2 params in tuple
        warn, crit = params
        cap_warn, cap_crit =  (95, 90)
    elif type(params) is dict:  # new dict format
        warn, crit = params.get('battime', (0, 0))
        cap_warn, cap_crit = params.get('capacity', (95, 90))
    else:
        warn, crit = (0, 0)
        cap_warn, cap_crit =  (95, 90)

    time_on_bat, minutes_left, percent_fuel = info[0]

    # Check time left on battery
    if minutes_left:
        minutes_left = saveint(minutes_left)
        if minutes_left > 0:
            state        = check_lower_levels(minutes_left, (warn, crit))
            infotext     = "%d min left on battery" % minutes_left

            if state:
                infotext += " (warn/crit below %d min/%d min)" % (warn, crit)

            yield state, infotext, [ ('estimated_minutes_remaining', minutes_left, warn, crit) ]

    # Check percentual capacity
    if percent_fuel:
        percent_fuel = saveint(percent_fuel)
        state        = check_lower_levels(percent_fuel, (cap_warn, cap_crit))
        infotext     = "capacity: %d%%" % percent_fuel

        if state:
            infotext += " (warn/crit below %d%%/%d%%)" % (cap_warn, cap_crit)

        yield state, infotext, [ ('estimated_charge_remaining', percent_fuel, cap_warn, cap_crit) ]

    # Output time on battery
    if time_on_bat and saveint(time_on_bat) > 0:
        yield 0, "On battery for %d min" % (saveint(time_on_bat)/60)

check_info["ups_eppc_capacity"] = {
    "check_function"        : check_ups_capacity,
    "inventory_function"    : inventory_ups_capacity,
    "service_description"   : "Battery capacity",
    "has_perfdata"          : True,
    "default_levels_variable" : "ups_capacity",
    "group"                 : "ups_capacity",
    "snmp_info"             : ( ".1.3.6.1.2.1.33.1.2", [
                                      "2.0",     # upsSecondsOnBattery
                                      "3.0",     # upsEstimatedMinutesRemaining
                                      "4.0",     # upsEstimatedChargeRemaining
                              ]),
    "snmp_scan_function"  : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.935.10.1"),
}
